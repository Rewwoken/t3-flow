generator client {
  provider = "prisma-client-js"
  output   = "generated/client" // to make pnpm work
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid()) @map("user_id")

  name     String?
  email    String  @unique
  password String

  // many to one relation: Task ==> Task[] in User
  tasks Task[]

  timerSettings TimerSettings?

  timerSession TimerSession?

  // many to one relation: TimeBlock ==> TimeBlock[] in User
  timeBlocks TimeBlock[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Task {
  id String @id @default(cuid()) @map("task_id")

  name        String
  priority    Priority? @default(low)
  rank        String // lexorank
  isCompleted Boolean?  @default(false) @map("is_completed")
  dueDate     DateTime? @map("due_date")

  // many to one relation: Task ==> Task[] in User
  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("task")
}

enum Priority {
  low
  medium
  high
}

model TimerSession {
  id String @id @default(cuid()) @map("timer_session_id")

  isCompleted  Boolean? @default(false) @map("is_completed")
  totalSeconds Int      @default(0) @map("total_seconds")

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("timer_session")
}

model TimerSettings {
  id String @id @default(cuid()) @map("timer_id")

  workInterval   Int? @default(50) @map("work_interval")
  breakInterval  Int? @default(10) @map("break_interval")
  intervalsCount Int? @default(7) @map("interval_count")

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("timer_settings")
}

model TimeBlock {
  id String @id @default(cuid()) @map("time_block_id")

  name     String
  color    String?
  duration Int
  rank     String // lexorank

  // many to one relation: TimeBlock ==> TimeBlock[] in User
  user   User  @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("time_block")
}
